{"version":3,"sources":["context/CostContext.tsx","components/SelectField.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CostContext","createContext","SelectField","options","field","form","multi","setTotal","useContext","isMulti","name","value","find","option","onChange","setFieldValue","sum","reduce","item","cost","onBlur","className","toast","configure","sportsOptions","label","paymentOptions","onKeyDown","keyEvent","charCode","keyCode","preventDefault","App","useState","total","fluid","year","Provider","initialValues","collegeName","contactNo","email","accommodation","prefPayment","sports","onSubmit","values","actions","a","data","totalCost","axios","method","url","process","then","res","success","catch","err","error","render","errors","status","touched","isSubmitting","style","textAlign","fontSize","type","required","component","htmlFor","marginLeft","marginTop","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6WAEaA,EAAcC,wBAAc,GCuC1BC,EApCkC,SAAC,GAK3C,IAJLC,EAII,EAJJA,QACAC,EAGI,EAHJA,MACAC,EAEI,EAFJA,KACAC,EACI,EADJA,MAGQC,EAAaC,qBAAWR,GAAxBO,SAER,OACE,kBAAC,IAAD,CACEE,QAASH,EACTH,QAASA,EACTO,KAAMN,EAAMM,KACZC,MACER,EACIA,EAAQS,MAAK,SAACC,GAAD,OAAiBA,EAAOF,QAAUP,EAAMO,SACrD,GAENG,SAAU,SAACD,GACT,GAAIA,EACF,GAAIP,EAAO,CACTD,EAAKU,cAAcX,EAAMM,KAAMG,GAC/B,IAAIG,EAAMH,EAAOI,QAAO,SAACD,EAAUE,GAAX,OAAyBF,EAAME,EAAKC,OAAM,GAClEZ,EAASS,QAETX,EAAKU,cAAcX,EAAMM,KAAMG,EAAOF,QAI5CS,OAAQhB,EAAMgB,OACdC,UAAU,Y,qkBCzBhBC,IAAMC,YAEN,IAEMC,EAAgB,CACpB,CAAEC,MAAO,kBAAmBd,MAAO,kBAAmBQ,KAAM,MAC5D,CAAEM,MAAO,mBAAoBd,MAAO,mBAAoBQ,KAAM,MAC9D,CAAEM,MAAO,mBAAoBd,MAAO,mBAAoBQ,KAAM,MAC9D,CAAEM,MAAO,oBAAqBd,MAAO,oBAAqBQ,KAAM,MAChE,CAAEM,MAAO,QAASd,MAAO,QAASQ,KAAM,MACxC,CAAEM,MAAO,SAAUd,MAAO,SAAUQ,KAAM,MAC1C,CAAEM,MAAO,gBAAiBd,MAAO,gBAAiBQ,KAAM,KACxD,CAAEM,MAAO,iBAAkBd,MAAO,iBAAkBQ,KAAM,MAC1D,CAAEM,MAAO,mBAAoBd,MAAO,mBAAoBQ,KAAM,MAC9D,CAAEM,MAAO,oBAAqBd,MAAO,oBAAqBQ,KAAM,MAChE,CAAEM,MAAO,iBAAkBd,MAAO,iBAAkBQ,KAAM,MAC1D,CAAEM,MAAO,kBAAmBd,MAAO,kBAAmBQ,KAAM,MAC5D,CAAEM,MAAO,qBAAsBd,MAAO,qBAAsBQ,KAAM,MAClE,CAAEM,MAAO,sBAAuBd,MAAO,sBAAuBQ,KAAM,MACpE,CAAEM,MAAO,oBAAqBd,MAAO,oBAAqBQ,KAAM,MAChE,CAAEM,MAAO,qBAAsBd,MAAO,qBAAsBQ,KAAM,OAG9DO,EAAiB,CACrB,CAAED,MAAO,OAAQd,MAAO,QACxB,CAAEc,MAAO,gBAAiBd,MAAO,kBAGnC,SAASgB,EAAUC,GAC+B,MAA3CA,EAASC,UAAYD,EAASE,UACjCF,EAASG,iBAIb,IA0IeC,EA1IO,WAAO,IAAD,EACAC,mBAAS,GADT,mBACnBC,EADmB,KACZ3B,EADY,KAG1B,OACE,kBAAC,OAAD,CAAM4B,OAAK,EAACd,UAAU,OACpB,6BACA,0BAAMA,UAAU,sBAAhB,yBAA4De,KAE5D,kBAACpC,EAAYqC,SAAb,CAEE1B,MAAO,CAAEuB,QAAO3B,aAEhB,kBAAC,IAAD,CACE+B,cAAe,CACb5B,KAAM,GACN6B,YAAa,GACbC,UAAW,GACXC,MAAO,GACPC,cAAe,EACfC,YAAa,GACbC,OAAQ,IAEVC,SAAQ,uCAAE,WAAOC,EAAQC,GAAf,eAAAC,EAAA,6DACFC,EADE,KAEHH,EAFG,CAGNI,UAAWhB,IAHL,SAKFiB,IAAM,CACVC,OAAQ,OACRC,IAAI,GAAD,OA7DOC,6BA6DP,aACHL,SAECM,MAAK,SAAAC,GAAG,OAAIlC,IAAMmC,QAAQ,8BAC1BC,OAAM,SAAAC,GAAG,OACRrC,IAAMsC,MAAM,8CAZR,2CAAF,wDAeRC,OAAQ,cAAGC,OAAH,EAAWC,OAAX,EAAmBC,QAAnB,EAA4BC,aAA5B,OACN,kBAAC,IAAD,CACEC,MAAO,CAAEC,UAAW,OAAQC,SAAU,IACtCzC,UAAWA,GAEX,kBAAC,MAAD,CAAKN,UAAU,OACb,2EACA,kBAAC,IAAD,CACEgD,KAAK,OACL3D,KAAK,OACLW,UAAU,sKACViD,UAAQ,IAEV,kBAAC,IAAD,CAAc5D,KAAK,OAAO6D,UAAU,SAEtC,kBAAC,MAAD,CAAKlD,UAAU,OACb,+CACA,kBAAC,IAAD,CACEgD,KAAK,OACL3D,KAAK,cACLW,UAAU,sKACViD,UAAQ,IAEV,kBAAC,IAAD,CAAc5D,KAAK,cAAc6D,UAAU,SAE7C,kBAAC,MAAD,CAAKlD,UAAU,OACb,8CACA,kBAAC,IAAD,CACEgD,KAAK,SACL3D,KAAK,YACLW,UAAU,sKACViD,UAAQ,IAEV,kBAAC,IAAD,CAAc5D,KAAK,YAAY6D,UAAU,SAE3C,kBAAC,MAAD,CAAKlD,UAAU,OACb,wCACA,kBAAC,IAAD,CACEgD,KAAK,QACL3D,KAAK,QACLW,UAAU,sKACViD,UAAQ,IAEV,kBAAC,IAAD,CAAc5D,KAAK,QAAQ6D,UAAU,SAEvC,kBAAC,MAAD,CAAKlD,UAAU,OACb,2BAAOmD,QAAQ,iBAAf,6CAGA,kBAAC,IAAD,CACEH,KAAK,SACL3D,KAAK,gBACLW,UAAU,sKACViD,UAAQ,KAIZ,kBAAC,MAAD,CAAKjD,UAAU,OACb,2BAAOmD,QAAQ,UAAf,UACA,kBAAC,IAAD,CACE9D,KAAK,SACL6D,UAAWrE,EACXC,QAASqB,EACTlB,OAAO,EACPgE,UAAQ,KAGZ,kBAAC,MAAD,CAAKjD,UAAU,OACb,2BAAOmD,QAAQ,eAAf,4BACA,kBAAC,IAAD,CACEH,KAAK,SACLE,UAAWrE,EACXC,QAASuB,EACThB,KAAK,cACLJ,OAAO,EACPgE,UAAQ,GAER,4BAAQ3D,MAAM,QAAd,QACA,4BAAQA,MAAM,iBAAd,mBAGJ,kBAAC,MAAD,CAAKU,UAAU,OACb,4BACEA,UAAU,wHACVgD,KAAK,UAFP,UAMA,yBAAKH,MAAO,CAAEO,WAAY,GAAIC,UAAW,KAAzC,mCACmCxC,SAO7C,+BCtKcyC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASnB,OAAO,kBAAC,EAAD,MAASoB,SAASC,eAAe,SDiI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM9B,MAAK,SAAA+B,GACjCA,EAAaC,kB","file":"static/js/main.4b13bab1.chunk.js","sourcesContent":["import { createContext } from 'react'\r\n\r\nexport const CostContext = createContext(0)\r\n","import React, { useContext } from 'react'\r\nimport { FieldProps } from 'formik'\r\nimport Select from 'react-select'\r\nimport { CostContext } from '../context/CostContext'\r\n\r\nconst SelectField: React.SFC<any & FieldProps> = ({\r\n  options,\r\n  field,\r\n  form,\r\n  multi,\r\n}) => {\r\n  //@ts-ignore\r\n  const { setTotal } = useContext(CostContext)\r\n\r\n  return (\r\n    <Select\r\n      isMulti={multi}\r\n      options={options}\r\n      name={field.name}\r\n      value={\r\n        options\r\n          ? options.find((option: any) => option.value === field.value)\r\n          : ''\r\n      }\r\n      onChange={(option: any) => {\r\n        if (option) {\r\n          if (multi) {\r\n            form.setFieldValue(field.name, option)\r\n            let sum = option.reduce((sum: any, item: any) => sum + item.cost, 0)\r\n            setTotal(sum)\r\n          } else {\r\n            form.setFieldValue(field.name, option.value)\r\n          }\r\n        }\r\n      }}\r\n      onBlur={field.onBlur}\r\n      className=\"w-full\"\r\n    />\r\n  )\r\n}\r\n\r\nexport default SelectField\r\n","import React, { useState } from 'react'\nimport { Formik, Form, Field, ErrorMessage } from 'formik'\nimport { Grid, Row } from 'react-flexbox-grid'\nimport axios from 'axios'\nimport { toast } from 'react-toastify'\nimport { year } from './meta.json'\nimport SelectField from './components/SelectField'\nimport { CostContext } from './context/CostContext'\nimport 'react-toastify/dist/ReactToastify.css'\nimport './App.css'\n\ntoast.configure()\n\nconst API_URL: string = process.env.REACT_APP_API_URL || 'http://localhost:5000'\n\nconst sportsOptions = [\n  { label: 'Badminton(Boys)', value: 'Badminton(Boys)', cost: 1800 },\n  { label: 'Badminton(Girls)', value: 'Badminton(Girls)', cost: 1200 },\n  { label: 'Basketball(Boys)', value: 'Basketball(Boys)', cost: 1600 },\n  { label: 'Basketball(Girls)', value: 'Basketball(Girls)', cost: 1200 },\n  { label: 'Chess', value: 'Chess', cost: 1200 },\n  { label: 'Carrom', value: 'Carrom', cost: 1200 },\n  { label: 'Cricket(Boys)', value: 'Cricket(Boys)', cost: 4000 },\n  { label: 'Cricket(Girls)', value: 'Cricket(Girls)', cost: 1200 },\n  { label: 'Volleyball(Boys)', value: 'Volleyball(Boys)', cost: 1800 },\n  { label: 'Volleyball(Girls)', value: 'Volleyball(Girls)', cost: 1200 },\n  { label: 'Football(Boys)', value: 'Football(Boys)', cost: 2800 },\n  { label: 'Football(Girls)', value: 'Football(Girls)', cost: 1400 },\n  { label: 'Table Tennis(Boys)', value: 'Table Tennis(Boys)', cost: 1800 },\n  { label: 'Table Tennis(Girls)', value: 'Table Tennis(Girls)', cost: 1200 },\n  { label: 'Lawn Tennis(Boys)', value: 'Lawn Tennis(Boys)', cost: 1600 },\n  { label: 'Lawn Tennis(Girls)', value: 'Lawn Tennis(Girls)', cost: 1200 },\n]\n\nconst paymentOptions = [\n  { label: 'Cash', value: 'Cash' },\n  { label: 'Bank Transfer', value: 'Bank Transfer' },\n]\n\nfunction onKeyDown(keyEvent: any) {\n  if ((keyEvent.charCode || keyEvent.keyCode) === 13) {\n    keyEvent.preventDefault()\n  }\n}\n\nconst App: React.FC = () => {\n  const [total, setTotal] = useState(0)\n\n  return (\n    <Grid fluid className=\"App\">\n      <br />\n      <span className=\"text-5xl font-bold\">Concours Registration {year}</span>\n\n      <CostContext.Provider\n        //@ts-ignore\n        value={{ total, setTotal }}\n      >\n        <Formik\n          initialValues={{\n            name: '',\n            collegeName: '',\n            contactNo: '',\n            email: '',\n            accommodation: 0,\n            prefPayment: '',\n            sports: [],\n          }}\n          onSubmit={async (values, actions) => {\n            const data = {\n              ...values,\n              totalCost: total,\n            }\n            await axios({\n              method: 'post',\n              url: `${API_URL}/register`,\n              data,\n            })\n              .then(res => toast.success('Successfully Registered'))\n              .catch(err =>\n                toast.error('Something went wrong. Please try again.')\n              )\n          }}\n          render={({ errors, status, touched, isSubmitting }) => (\n            <Form\n              style={{ textAlign: 'left', fontSize: 20 }}\n              onKeyDown={onKeyDown}\n            >\n              <Row className=\"m-5\">\n                <label>Name (contingent leader/captain of team)</label>\n                <Field\n                  type=\"text\"\n                  name=\"name\"\n                  className=\"bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-purple-500\"\n                  required\n                />\n                <ErrorMessage name=\"name\" component=\"div\" />\n              </Row>\n              <Row className=\"m-5\">\n                <label>College Name</label>\n                <Field\n                  type=\"text\"\n                  name=\"collegeName\"\n                  className=\"bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-purple-500\"\n                  required\n                />\n                <ErrorMessage name=\"collegeName\" component=\"div\" />\n              </Row>\n              <Row className=\"m-5\">\n                <label>Contact No.</label>\n                <Field\n                  type=\"number\"\n                  name=\"contactNo\"\n                  className=\"bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-purple-500\"\n                  required\n                />\n                <ErrorMessage name=\"contactNo\" component=\"div\" />\n              </Row>\n              <Row className=\"m-5\">\n                <label>Email</label>\n                <Field\n                  type=\"email\"\n                  name=\"email\"\n                  className=\"bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-purple-500\"\n                  required\n                />\n                <ErrorMessage name=\"email\" component=\"div\" />\n              </Row>\n              <Row className=\"m-5\">\n                <label htmlFor=\"accommodation\">\n                  Accommodation (leave blank if not needed)\n                </label>\n                <Field\n                  type=\"number\"\n                  name=\"accommodation\"\n                  className=\"bg-gray-200 appearance-none border-2 border-gray-200 rounded w-full py-2 px-4 text-gray-700 leading-tight focus:outline-none focus:bg-white focus:border-purple-500\"\n                  required\n                />\n              </Row>\n\n              <Row className=\"m-5\">\n                <label htmlFor=\"sports\">Sports</label>\n                <Field\n                  name=\"sports\"\n                  component={SelectField}\n                  options={sportsOptions}\n                  multi={true}\n                  required\n                />\n              </Row>\n              <Row className=\"m-5\">\n                <label htmlFor=\"prefPayment\">Preferred Payment Method</label>\n                <Field\n                  type=\"select\"\n                  component={SelectField}\n                  options={paymentOptions}\n                  name=\"prefPayment\"\n                  multi={false}\n                  required\n                >\n                  <option value=\"Cash\">Cash</option>\n                  <option value=\"Bank Transfer\">Bank Transfer</option>\n                </Field>\n              </Row>\n              <Row className=\"m-5\">\n                <button\n                  className=\"bg-blue-500 hover:bg-blue-400 text-white font-bold py-2 px-4 border-b-4 border-blue-700 hover:border-blue-500 rounded\"\n                  type=\"submit\"\n                >\n                  Submit\n                </button>\n                <div style={{ marginLeft: 50, marginTop: 10 }}>\n                  Total Payment for Registration: {total}\n                </div>\n              </Row>\n            </Form>\n          )}\n        />\n      </CostContext.Provider>\n      <br />\n    </Grid>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'tailwindcss/dist/tailwind.min.css'\nimport './index.css'\nimport Admin from './Admin'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}